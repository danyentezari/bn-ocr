{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/danyentezari/bn-ocr/blob/main/Work%20on%20prediction%20distribution.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "obI7x309JZl7"
      },
      "outputs": [],
      "source": [
        "!pip install keras==2.2.5\n",
        "!pip install tensorflow==1.13.1\n",
        "# !unzip kaggle.json.zip\n",
        "# !mkdir ~/.kaggle \n",
        "# !cp kaggle.json ~/.kaggle/\n",
        "# !chmod 600 ~/.kaggle/kaggle.json\n",
        "# !kaggle datasets download scolianni/mnistasjpg\n",
        "# !unzip mnistasjpg.zip\n",
        "!pip install 'h5py==2.10.0' --force-reinstall\n",
        "!pip install cairocffi\n",
        "!pip install gdown\n",
        "!pip install synthtiger"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/clovaai/synthtiger.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ySjCR1kKQyuw",
        "outputId": "011c9d77-a095-4993-8fed-df2d58e2451f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'synthtiger' already exists and is not an empty directory.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!cp -r synthtiger/* ."
      ],
      "metadata": {
        "id": "PNhp_OsURUvI"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!synthtiger -o results -w 4 -v examples/synthtiger/template.py SynthTiger examples/synthtiger/config_horizontal.yaml"
      ],
      "metadata": {
        "id": "9y-nYN53QKss"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 354,
      "metadata": {
        "id": "dq_h85uJ60oR"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from os import listdir\n",
        "from os.path import isfile, join\n",
        "import re\n",
        "from scipy.sparse import csr_matrix\n",
        "import cv2\n",
        "import string\n",
        "from PIL import Image\n",
        "\n",
        "import itertools\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import HashingVectorizer\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import datasets, layers, models\n",
        "\n",
        "import keras\n",
        "from keras.utils.np_utils import to_categorical\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.models import Sequential\n",
        "from keras.layers import * #Conv2D, Lambda, MaxPooling2D # convolution layers\n",
        "#from keras.layers import Dense, Dropout, Flatten # core layers\n",
        "# from keras.layers.normalization import BatchNormalization\n",
        "from keras.preprocessing.image import load_img\n",
        "from keras.preprocessing.image import img_to_array\n",
        "\n",
        "\n",
        "from keras import backend as K\n",
        "from keras.layers.convolutional import Conv2D, MaxPooling2D\n",
        "# from keras.layers import Input, Dense, Activation, Add\n",
        "# from keras.layers import Reshape, Lambda\n",
        "from keras.layers.merge import add, concatenate\n",
        "from keras.models import Model\n",
        "from keras.layers.recurrent import GRU\n",
        "from keras.utils.data_utils import get_file\n",
        "from keras.preprocessing import image\n",
        "import keras.callbacks\n",
        "#from keras.metrics import Metric\n",
        "from tensorflow.python.keras.metrics import Metric\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 447,
      "metadata": {
        "id": "x1HL-lIrl_3J"
      },
      "outputs": [],
      "source": [
        "def loadImage(filepath):\n",
        "  img = load_img(filepath)\n",
        "  img = img_to_array(img)\n",
        "  #img = img.reshape(1, 42, 42, 3)\n",
        "  # img = img.reshape(64, 192, 3)\n",
        "  img = img.astype('float32')\n",
        "  # img = img / 255.0\n",
        "  return img"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jXCR8ROH7ep6"
      },
      "source": [
        "### Features and Labels"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def create_canvas(canvas_h=300, canvas_w=300):\n",
        "  # Create canvas\n",
        "  canvas_color = 255\n",
        "\n",
        "  pixel_rows = []\n",
        "  row = [canvas_color for x in range(0,canvas_w)]\n",
        "  for i in range(0,canvas_h):\n",
        "    pixel_rows.append(row)\n",
        "  r = pixel_rows\n",
        "  g = pixel_rows\n",
        "  b = pixel_rows\n",
        "\n",
        "  canvas = np.dstack((r,g,b))\n",
        "  return canvas\n",
        "\n",
        "cw = 950\n",
        "ch = 200\n",
        "canvas = create_canvas(ch, cw)\n",
        "\n",
        "def center_pad_image(img, canvas_h=300, canvas_w=300):\n",
        "  # Image positions\n",
        "  img2_width = img.shape[1]\n",
        "  img2_height = img.shape[0]\n",
        "  black_row = np.array([[0 for x in range(0,img2_width)]])\n",
        "  img2 = np.dstack((black_row,black_row,black_row))\n",
        "\n",
        "\n",
        "  startx = int((canvas_w-img2_width)/2)\n",
        "  starty = int((canvas_h-img2_height)/2)\n",
        "  endx = startx + img2_width\n",
        "  endy = starty + img2_height\n",
        "\n",
        "  # Superimpose image\n",
        "  to_superimpose = Image.fromarray(np.uint8(img)).convert('RGB')\n",
        "  # Reset global canvas\n",
        "  canvas[:, :] = 255\n",
        "  canvas[starty:endy, startx:endx] = to_superimpose\n",
        "\n",
        "\n",
        "  return Image.fromarray(np.uint8(canvas)).convert('RGB')\n",
        "\n",
        "\n",
        "# center_pad_image(sample_image, ch, cw)"
      ],
      "metadata": {
        "id": "oY3bH7oEpKH9"
      },
      "execution_count": 444,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "file1 = open('./results/gt.txt', 'r')\n",
        "Lines = file1.readlines()\n",
        "  \n",
        "print(len(Lines))\n",
        "\n",
        "data_F = np.empty((100, ch, cw, 3))\n",
        "data_L = np.array([])\n",
        "\n",
        "count = 0\n",
        "# Strips the newline character\n",
        "for i,line in enumerate(Lines):\n",
        "    d = re.split('\\t', line)\n",
        "    d[1] = d[1].replace('\\n','')\n",
        "\n",
        "    img = loadImage(f'results/{d[0]}')\n",
        "    loaded_image = np.array(center_pad_image(img, ch, cw))\n",
        "    data_F[i] = loaded_image\n",
        "    data_L = np.append(data_L, d[1])\n",
        "\n",
        "print(img.shape)\n",
        "data_F.shape\n",
        "Image.fromarray(np.uint8(data_F[0])).convert('RGB')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "N-nD7bwuS6XM",
        "outputId": "a119177d-b1a1-451f-87a8-050be29b073c"
      },
      "execution_count": 448,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n",
            "(90, 462, 3)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=950x200>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 448
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# img = data_F[0]\n",
        "# img = img.astype(np.uint8) \n",
        "# plt.title(data_L[0])\n",
        "x = data_F[90].astype(np.uint8)\n",
        "plt.imshow(x)\n",
        "\n",
        "print(data_L[90])\n",
        "print(x.shape)\n",
        "print(img.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 177
        },
        "id": "EiSWPt8rgYBT",
        "outputId": "e339df2a-3f7c-4186-891f-24312a4739c7"
      },
      "execution_count": 450,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "THE\n",
            "(200, 950, 3)\n",
            "(90, 462, 3)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "alphabet = 'abcdefghijklmnopqrstuvwxyz./:;,\\'\"-_1234567890?!)(][}{><'\n",
        "alph_num = re.split('', alphabet)\n",
        "alph_dict = dict({})\n",
        "\n",
        "for j, c in enumerate(alph_num):\n",
        "  alph_dict[c] = j"
      ],
      "metadata": {
        "id": "jF7IUwQ4tq5e"
      },
      "execution_count": 258,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "s = 'better'\n",
        "alph_dict\n",
        "_id = list(map(lambda c: alph_dict[c], s))\n",
        "_id\n",
        "# data_L_dist = to_categorical(data_L[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7-zdBwXRvZCX",
        "outputId": "da61fe0f-dd2e-4f1a-dfa5-b03b40fdae57"
      },
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 5, 20, 20, 5, 18]"
            ]
          },
          "metadata": {},
          "execution_count": 224
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "m = lambda x: [alph_dict[c] for c in x]\n",
        "\n",
        "data_L_id = np.zeros((100,237))\n",
        "for k,data in enumerate(data_L):\n",
        "  data = data.lower()\n",
        "  ids = m(data)\n",
        "  # data_L_id = np.append(data_L_id, [ids], axis=0)\n",
        "  data_L_id[k][0:len(ids)] = ids[:]\n",
        "  # data_L_id = np.append(data_L_id, m(data), axis=0)"
      ],
      "metadata": {
        "id": "pUNOAafDwDRa"
      },
      "execution_count": 375,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_L_dist = to_categorical(data_L_id)"
      ],
      "metadata": {
        "id": "buO-b82007pM"
      },
      "execution_count": 376,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_L_dist.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pO_Z5df91C5U",
        "outputId": "bf83ec7b-6caa-4753-c80e-27d6a81236c2"
      },
      "execution_count": 377,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 237, 55)"
            ]
          },
          "metadata": {},
          "execution_count": 377
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(alphabet)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mvu24rQg1G2a",
        "outputId": "6b56391c-f121-47f7-947d-0e42148c13b1"
      },
      "execution_count": 322,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "55"
            ]
          },
          "metadata": {},
          "execution_count": 322
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y3mlAF8Q7ocC"
      },
      "source": [
        "### Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 382,
      "metadata": {
        "id": "KfOMTtB1hcdF"
      },
      "outputs": [],
      "source": [
        "train_F, test_F, train_L_dist, test_L_dist = train_test_split(data_F, data_L_dist, test_size=0.1, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 383,
      "metadata": {
        "id": "17RoiGw_hsWY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2032d2fa-b737-446b-b1e8-33bb88c7a776"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((90, 200, 950, 3), (10, 200, 950, 3), (90, 237, 55), (10, 237, 55))"
            ]
          },
          "metadata": {},
          "execution_count": 383
        }
      ],
      "source": [
        "train_F.shape, test_F.shape, train_L_dist.shape, test_L_dist.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 384,
      "metadata": {
        "id": "uSttdlwhg4Nx"
      },
      "outputs": [],
      "source": [
        "# With data augmentation to prevent overfitting\n",
        "\n",
        "datagen = ImageDataGenerator(\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.01, # Randomly zoom image \n",
        "        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=False,  # randomly flip images\n",
        "        vertical_flip=False)  # randomly flip images\n",
        "\n",
        "\n",
        "#datagen.fit(X_train)\n",
        "train_gen = datagen.flow(train_F, train_L_dist, batch_size=1)\n",
        "test_gen = datagen.flow(test_F, test_L_dist, batch_size=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 451,
      "metadata": {
        "id": "map673iJhIgl"
      },
      "outputs": [],
      "source": [
        "epochs = 5\n",
        "batch_size = 10\n",
        "train_steps = train_F.shape[0] // batch_size\n",
        "valid_steps = train_L_dist.shape[0] // batch_size\n",
        "\n",
        "es = keras.callbacks.EarlyStopping(\n",
        "        monitor=\"val_acc\", # metrics to monitor\n",
        "        patience=10, # how many epochs before stop\n",
        "        verbose=1,\n",
        "        mode=\"max\", # we need the maximum accuracy.\n",
        "        restore_best_weights=True, # \n",
        "     )\n",
        "\n",
        "rp = keras.callbacks.ReduceLROnPlateau(\n",
        "        monitor=\"val_acc\",\n",
        "        factor=0.2,\n",
        "        patience=3,\n",
        "        verbose=1,\n",
        "        mode=\"max\",\n",
        "        min_lr=0.00001,\n",
        "     )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 389,
      "metadata": {
        "id": "qmORo5YJdqLH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09d3c263-b2a3-4921-a1dd-36ca0c69a815"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_19\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "the_input (InputLayer)          (None, 200, 950, 3)  0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1 (Conv2D)                  (None, 200, 950, 16) 448         the_input[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "max1 (MaxPooling2D)             (None, 100, 475, 16) 0           conv1[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "conv2 (Conv2D)                  (None, 100, 475, 16) 2320        max1[0][0]                       \n",
            "__________________________________________________________________________________________________\n",
            "max2 (MaxPooling2D)             (None, 50, 237, 16)  0           conv2[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "reshape (Reshape)               (None, 237, 800)     0           max2[0][0]                       \n",
            "__________________________________________________________________________________________________\n",
            "dense1 (Dense)                  (None, 237, 32)      25632       reshape[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "gru1 (GRU)                      (None, 237, 512)     837120      dense1[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "gru1_b (GRU)                    (None, 237, 512)     837120      dense1[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "add_22 (Add)                    (None, 237, 512)     0           gru1[0][0]                       \n",
            "                                                                 gru1_b[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "gru2 (GRU)                      (None, 237, 512)     1574400     add_22[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "gru2_b (GRU)                    (None, 237, 512)     1574400     add_22[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "concatenate_20 (Concatenate)    (None, 237, 1024)    0           gru2[0][0]                       \n",
            "                                                                 gru2_b[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "dense2 (Dense)                  (None, 237, 55)      56375       concatenate_20[0][0]             \n",
            "__________________________________________________________________________________________________\n",
            "softmax (Activation)            (None, 237, 55)      0           dense2[0][0]                     \n",
            "==================================================================================================\n",
            "Total params: 4,907,815\n",
            "Trainable params: 4,907,815\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "img_w = cw\n",
        "img_h = ch\n",
        "words_per_epoch = 16000\n",
        "val_split = 0.2\n",
        "val_words = int(words_per_epoch * (val_split))\n",
        "\n",
        "# Network parameters\n",
        "conv_filters = 16\n",
        "kernel_size = (3, 3)\n",
        "pool_size = 2\n",
        "time_dense_size = 32\n",
        "rnn_size = 512\n",
        "minibatch_size = 10\n",
        "\n",
        "# model1=Sequential()\n",
        "\n",
        "\n",
        "# model1.add(InputLayer(input_shape=(cw,ch,3)))\n",
        "\n",
        "# #model1.add(Lambda(standardize,input_shape=(28,28,1)))    \n",
        "# model1.add(\n",
        "#     Conv2D(\n",
        "#         filters=conv_filters, \n",
        "#         kernel_size = (3,3), \n",
        "#         activation=\"relu\",\n",
        "#         # kernel_initializer='he_normal'\n",
        "#       )\n",
        "#   )\n",
        "\n",
        "# model1.add(MaxPooling2D(pool_size=(2,2)))\n",
        "\n",
        "# model1.add(Conv2D(filters=conv_filters, kernel_size = (3,3), activation=\"relu\", kernel_initializer='he_normal'))\n",
        "\n",
        "# model1.add(MaxPooling2D(pool_size=(2,2)))\n",
        "\n",
        "# model1.add(Conv2D(filters=conv_filters, kernel_size = (3,3), activation=\"relu\", kernel_initializer='he_normal'))\n",
        "# model1.add(Conv2D(filters=conv_filters, kernel_size = (3,3), activation=\"relu\", kernel_initializer='he_normal'))\n",
        "\n",
        "# model1.add(MaxPooling2D(pool_size=(2,2)))\n",
        "\n",
        "# model1.add(Conv2D(filters=conv_filters, kernel_size = (3,3), activation=\"relu\", kernel_initializer='he_normal'))\n",
        "\n",
        "# model1.add(BatchNormalization())\n",
        "\n",
        "# model1.add(Conv2D(filters=conv_filters, kernel_size = (3,3), activation=\"relu\", kernel_initializer='he_normal'))\n",
        "\n",
        "# model1.add(BatchNormalization())\n",
        "\n",
        "# model1.add(MaxPooling2D(pool_size=(2,2)))\n",
        "\n",
        "# model1.add(Conv2D(filters=conv_filters, kernel_size = (3,3), activation=\"relu\", kernel_initializer='he_normal'))\n",
        "\n",
        "# model1.add(Flatten())\n",
        "\n",
        "# model1.add(Bidirectional(LSTM(10, return_sequences=True))\n",
        "# # model1.add(LSTM(256))\n",
        "\n",
        "# model1.add(Dense(55))\n",
        "\n",
        "# conv_to_rnn_dims = (img_w // (pool_size ** 2),\n",
        "#                     (img_h // (pool_size ** 2)) * conv_filters)\n",
        "\n",
        "\n",
        "# model1.add(Reshape(target_shape=conv_to_rnn_dims))\n",
        "\n",
        "# model1.add(Flatten())\n",
        "\n",
        "# model1.add(Dense(time_dense_size, activation='relu'))\n",
        "\n",
        "\n",
        "# gru1 = GRU(rnn_size, return_sequences=True, kernel_initializer='he_normal')\n",
        "# gru2 = GRU(rnn_size, return_sequences=True, kernel_initializer='he_normal', go_backwards=True)\n",
        "# # gru_merged = Add()([gru1, gru2]) #add([gru1, gru2])\n",
        "# # model1.add(gru_merged)\n",
        "\n",
        "# gru1b = GRU(rnn_size, return_sequences=True, kernel_initializer='he_normal')\n",
        "# gru2b = GRU(rnn_size, return_sequences=True, kernel_initializer='he_normal', go_backwards=True)\n",
        "# gru2b_concat = concatenate(gru1b, gru2b)\n",
        "# model1.add(gru2b_concat)\n",
        "# model1.summary()\n",
        "\n",
        "\n",
        "\n",
        "# model1.add(Dense(20, activation='softmax', kernel_initializer='he_normal'))\n",
        "# model1.add()\n",
        "\n",
        "input_shape = (ch, cw, 3)\n",
        "\n",
        "act = 'relu'\n",
        "input_data = Input(name='the_input', shape=input_shape, dtype='float32')\n",
        "inner = Conv2D(conv_filters, kernel_size, padding='same',\n",
        "                activation=act, kernel_initializer='he_normal',\n",
        "                name='conv1')(input_data)\n",
        "inner = MaxPooling2D(pool_size=(pool_size, pool_size), name='max1')(inner)\n",
        "inner = Conv2D(conv_filters, kernel_size, padding='same',\n",
        "                activation=act, kernel_initializer='he_normal',\n",
        "                name='conv2')(inner)\n",
        "inner = MaxPooling2D(pool_size=(pool_size, pool_size), name='max2')(inner)\n",
        "\n",
        "conv_to_rnn_dims = (img_w // (pool_size ** 2),\n",
        "                    (img_h // (pool_size ** 2)) * conv_filters)\n",
        "inner = Reshape(target_shape=conv_to_rnn_dims, name='reshape')(inner)\n",
        "\n",
        "# cuts down input size going into RNN:\n",
        "inner = Dense(time_dense_size, activation=act, name='dense1')(inner)\n",
        "\n",
        "# Two layers of bidirectional GRUs\n",
        "# GRU seems to work as well, if not better than LSTM:\n",
        "gru_1 = GRU(rnn_size, return_sequences=True,\n",
        "            kernel_initializer='he_normal', name='gru1')(inner)\n",
        "gru_1b = GRU(rnn_size, return_sequences=True,\n",
        "              go_backwards=True, kernel_initializer='he_normal',\n",
        "              name='gru1_b')(inner)\n",
        "gru1_merged = add([gru_1, gru_1b])\n",
        "gru_2 = GRU(rnn_size, return_sequences=True,\n",
        "            kernel_initializer='he_normal', name='gru2')(gru1_merged)\n",
        "gru_2b = GRU(rnn_size, return_sequences=True, go_backwards=True,\n",
        "              kernel_initializer='he_normal', name='gru2_b')(gru1_merged)\n",
        "\n",
        "# transforms RNN output to character activations:\n",
        "inner = Dense(55, kernel_initializer='he_normal', name='dense2')(concatenate([gru_2, gru_2b]))\n",
        "y_pred = Activation('softmax', name='softmax')(inner)\n",
        "\n",
        "prediction_model = Model(inputs=input_data, outputs=y_pred)\n",
        "prediction_model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n",
        "\n",
        "prediction_model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_L_dist.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3zF53JrNCtEf",
        "outputId": "49816150-3160-4eae-a46c-1823e7dd7f8a"
      },
      "execution_count": 390,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(90, 237, 55)"
            ]
          },
          "metadata": {},
          "execution_count": 390
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model\n",
        "metrics1 = prediction_model.fit_generator(train_gen, \n",
        "                              epochs = epochs, \n",
        "                              steps_per_epoch = train_steps,\n",
        "                              validation_data = test_gen,\n",
        "                              validation_steps = valid_steps, \n",
        "                              callbacks=[es, rp]\n",
        "                              )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tKYW4qqlI6yt",
        "outputId": "ad93b678-c720-47f5-d0fb-643b69d406c7"
      },
      "execution_count": 391,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "90/90 [==============================] - 289s 3s/step - loss: 0.2156 - acc: 0.9566 - val_loss: 0.1919 - val_acc: 0.9617\n",
            "Epoch 2/5\n",
            "90/90 [==============================] - 285s 3s/step - loss: 0.1574 - acc: 0.9664 - val_loss: 0.1747 - val_acc: 0.9599\n",
            "Epoch 3/5\n",
            "90/90 [==============================] - 292s 3s/step - loss: 0.1539 - acc: 0.9668 - val_loss: 0.4751 - val_acc: 0.9452\n",
            "Epoch 4/5\n",
            "90/90 [==============================] - 274s 3s/step - loss: 0.1741 - acc: 0.9676 - val_loss: 0.1960 - val_acc: 0.9612\n",
            "\n",
            "Epoch 00004: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
            "Epoch 5/5\n",
            "90/90 [==============================] - 282s 3s/step - loss: 0.1405 - acc: 0.9675 - val_loss: 0.1701 - val_acc: 0.9620\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h6Zu6CyARjYj"
      },
      "source": [
        "### Predict"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# View sample image and predicted label together\n",
        "\n",
        "sample_image = loadImage('./ayer.png')\n",
        "sample_image = (sample_image )\n",
        "# Image.fromarray(np.uint8(sample_image*255)).convert('RGB')\n",
        "img = sample_image.astype(np.uint8) \n",
        "# img = np.array(center_pad_image(img, ch, cw))\n",
        "\n",
        "img = np.array(center_pad_image(train_F[0], ch, cw))\n",
        "\n",
        "plt.imshow(img)\n",
        "\n",
        "img.shape\n",
        "\n",
        "# yhat = prediction_model.predict(img.reshape(1, ch, cw, 3))\n",
        "yhat = prediction_model.predict(train_F[0].reshape(1,ch,cw,3))\n",
        "yhat.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "id": "QZ3WPrlJEASE",
        "outputId": "f0fe893f-8114-476e-ab6a-c46b1fc3b286"
      },
      "execution_count": 452,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 237, 55)"
            ]
          },
          "metadata": {},
          "execution_count": 452
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.argmax(yhat, axis=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mKAnR1faK5pQ",
        "outputId": "0d31b3a4-f393-4bb1-9d00-cc94febf4629"
      },
      "execution_count": 429,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       ...,\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0],\n",
              "       [0, 0, 0, ..., 0, 0, 0]])"
            ]
          },
          "metadata": {},
          "execution_count": 429
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "yhat[0][0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jo73qMRaLJVy",
        "outputId": "58b02d39-fdd1-4e14-864b-30befcdb36dc"
      },
      "execution_count": 430,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.01719866, 0.08380939, 0.01859676, 0.09155411, 0.02182584,\n",
              "       0.02052853, 0.02221929, 0.01350947, 0.04699279, 0.07903574,\n",
              "       0.00445132, 0.00753544, 0.03334547, 0.02150715, 0.05861043,\n",
              "       0.05921347, 0.04266709, 0.00221363, 0.03556879, 0.08557759,\n",
              "       0.05771645, 0.0441425 , 0.01520419, 0.01051525, 0.00548626,\n",
              "       0.01024657, 0.00873938, 0.00570828, 0.0020214 , 0.0019092 ,\n",
              "       0.00136308, 0.00599235, 0.0046256 , 0.0023917 , 0.0024713 ,\n",
              "       0.00132113, 0.0011388 , 0.00046019, 0.00152001, 0.00795133,\n",
              "       0.00718694, 0.00278723, 0.00243643, 0.00199388, 0.00110944,\n",
              "       0.00421444, 0.00106258, 0.00212187, 0.00420112, 0.00314842,\n",
              "       0.00044595, 0.0015583 , 0.00210253, 0.00114138, 0.0076036 ],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 430
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XrNj5y6rK2Cy",
        "outputId": "b403843a-ceed-4107-8b80-fed2552a4797"
      },
      "execution_count": 404,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[255, 255, 255],\n",
              "       [255, 255, 255],\n",
              "       [255, 255, 255],\n",
              "       ...,\n",
              "       [255, 255, 255],\n",
              "       [255, 255, 255],\n",
              "       [255, 255, 255]], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 404
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_L_dist[0].argmax(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nGleVOZiKFRI",
        "outputId": "c7a3bff8-7a6a-4124-d854-bbe2fe45399e"
      },
      "execution_count": 428,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([18,  5,  3,  1, 16, 16,  5,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n",
              "        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0])"
            ]
          },
          "metadata": {},
          "execution_count": 428
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "uA-0mDSPKxkR"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "keras-ocr-bignumber-generator.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOOQfGbDUS7C/tS0KQoc+k7",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}